Some weights of the model checkpoint at roberta-base were not used when initializing RobertaForSequenceClassification: ['lm_head.bias', 'lm_head.layer_norm.bias', 'lm_head.dense.weight', 'roberta.pooler.dense.bias', 'lm_head.layer_norm.weight', 'roberta.pooler.dense.weight', 'lm_head.decoder.weight', 'lm_head.dense.bias']
- This IS expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at roberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.weight', 'classifier.out_proj.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
***** Running training *****
  Num examples = 6399
  Num Epochs = 1
  Instantaneous batch size per device = 64
  Total train batch size (w. parallel, distributed & accumulation) = 64
  Gradient Accumulation steps = 1
  Total optimization steps = 100
  0%|          | 0/100 [00:00<?, ?it/s]/home2/hsteinm/573/repo/src/fine-tune.py:38: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  item = {key: torch.tensor(val[index]) for key, val in self.encodings.items()}
  1%|          | 1/100 [01:00<1:39:26, 60.27s/it]  2%|▏         | 2/100 [01:59<1:37:28, 59.68s/it]  3%|▎         | 3/100 [02:58<1:36:11, 59.50s/it]  4%|▍         | 4/100 [03:58<1:35:02, 59.40s/it]  5%|▌         | 5/100 [04:57<1:34:17, 59.55s/it]  6%|▌         | 6/100 [05:57<1:33:08, 59.45s/it]  7%|▋         | 7/100 [06:56<1:32:05, 59.41s/it]  8%|▊         | 8/100 [07:55<1:31:00, 59.35s/it]  9%|▉         | 9/100 [08:55<1:30:03, 59.38s/it] 10%|█         | 10/100 [09:54<1:28:58, 59.32s/it] 11%|█         | 11/100 [10:53<1:27:57, 59.30s/it] 12%|█▏        | 12/100 [11:52<1:26:55, 59.27s/it] 13%|█▎        | 13/100 [12:52<1:25:56, 59.27s/it] 14%|█▍        | 14/100 [13:51<1:24:56, 59.26s/it] 15%|█▌        | 15/100 [14:50<1:23:57, 59.27s/it] 16%|█▌        | 16/100 [15:50<1:23:02, 59.32s/it] 17%|█▋        | 17/100 [16:49<1:22:02, 59.31s/it] 18%|█▊        | 18/100 [17:48<1:21:06, 59.35s/it] 19%|█▉        | 19/100 [18:48<1:20:08, 59.37s/it] 20%|██        | 20/100 [19:47<1:19:09, 59.37s/it] 21%|██        | 21/100 [20:46<1:18:11, 59.39s/it] 22%|██▏       | 22/100 [21:46<1:17:10, 59.37s/it] 23%|██▎       | 23/100 [22:45<1:16:11, 59.37s/it] 24%|██▍       | 24/100 [23:45<1:15:11, 59.36s/it] 25%|██▌       | 25/100 [24:44<1:14:14, 59.39s/it] 26%|██▌       | 26/100 [25:43<1:13:13, 59.37s/it] 27%|██▋       | 27/100 [26:43<1:12:13, 59.36s/it] 28%|██▊       | 28/100 [27:42<1:11:11, 59.33s/it] 29%|██▉       | 29/100 [28:41<1:10:17, 59.40s/it] 30%|███       | 30/100 [29:41<1:09:18, 59.41s/it] 31%|███       | 31/100 [30:40<1:08:19, 59.41s/it] 32%|███▏      | 32/100 [31:40<1:07:19, 59.40s/it] 33%|███▎      | 33/100 [32:39<1:06:25, 59.49s/it] 34%|███▍      | 34/100 [33:39<1:05:32, 59.59s/it] 35%|███▌      | 35/100 [34:39<1:04:31, 59.56s/it] 36%|███▌      | 36/100 [35:38<1:03:24, 59.45s/it] 37%|███▋      | 37/100 [36:37<1:02:22, 59.40s/it] 38%|███▊      | 38/100 [37:37<1:01:22, 59.39s/it] 39%|███▉      | 39/100 [38:36<1:00:24, 59.41s/it] 40%|████      | 40/100 [39:35<59:21, 59.36s/it]   41%|████      | 41/100 [40:35<58:20, 59.33s/it] 42%|████▏     | 42/100 [41:34<57:20, 59.32s/it] 43%|████▎     | 43/100 [42:33<56:21, 59.32s/it] 44%|████▍     | 44/100 [43:32<55:21, 59.31s/it] 45%|████▌     | 45/100 [44:32<54:27, 59.40s/it] 46%|████▌     | 46/100 [45:32<53:29, 59.43s/it] 47%|████▋     | 47/100 [46:31<52:27, 59.38s/it] 48%|████▊     | 48/100 [47:30<51:25, 59.34s/it] 49%|████▉     | 49/100 [48:29<50:27, 59.36s/it] 50%|█████     | 50/100 [49:29<49:25, 59.30s/it] 51%|█████     | 51/100 [50:28<48:24, 59.28s/it] 52%|█████▏    | 52/100 [51:27<47:27, 59.32s/it] 53%|█████▎    | 53/100 [52:27<46:27, 59.30s/it] 54%|█████▍    | 54/100 [53:26<45:28, 59.31s/it] 55%|█████▌    | 55/100 [54:25<44:27, 59.27s/it] 56%|█████▌    | 56/100 [55:24<43:28, 59.28s/it] 57%|█████▋    | 57/100 [56:25<42:41, 59.56s/it] 58%|█████▊    | 58/100 [57:24<41:43, 59.62s/it] 59%|█████▉    | 59/100 [58:24<40:40, 59.52s/it] 60%|██████    | 60/100 [59:23<39:38, 59.45s/it] 61%|██████    | 61/100 [1:00:22<38:35, 59.37s/it] 62%|██████▏   | 62/100 [1:01:21<37:34, 59.32s/it] 63%|██████▎   | 63/100 [1:02:20<36:33, 59.28s/it] 64%|██████▍   | 64/100 [1:03:20<35:33, 59.27s/it] 65%|██████▌   | 65/100 [1:04:19<34:33, 59.26s/it] 66%|██████▌   | 66/100 [1:05:18<33:33, 59.23s/it] 67%|██████▋   | 67/100 [1:06:17<32:34, 59.23s/it] 68%|██████▊   | 68/100 [1:07:16<31:34, 59.20s/it] 69%|██████▉   | 69/100 [1:08:16<30:36, 59.25s/it] 70%|███████   | 70/100 [1:09:16<29:45, 59.51s/it] 71%|███████   | 71/100 [1:10:15<28:44, 59.47s/it] 72%|███████▏  | 72/100 [1:11:15<27:44, 59.45s/it] 73%|███████▎  | 73/100 [1:12:14<26:44, 59.41s/it] 74%|███████▍  | 74/100 [1:13:14<25:46, 59.48s/it] 75%|███████▌  | 75/100 [1:14:13<24:45, 59.44s/it] 76%|███████▌  | 76/100 [1:15:12<23:45, 59.41s/it] 77%|███████▋  | 77/100 [1:16:12<22:45, 59.36s/it] 78%|███████▊  | 78/100 [1:17:11<21:44, 59.29s/it] 79%|███████▉  | 79/100 [1:18:10<20:44, 59.24s/it] 80%|████████  | 80/100 [1:19:09<19:45, 59.29s/it] 81%|████████  | 81/100 [1:20:08<18:45, 59.26s/it] 82%|████████▏ | 82/100 [1:21:08<17:46, 59.24s/it] 83%|████████▎ | 83/100 [1:22:07<16:46, 59.20s/it] 84%|████████▍ | 84/100 [1:23:06<15:47, 59.24s/it] 85%|████████▌ | 85/100 [1:24:06<14:49, 59.33s/it] 86%|████████▌ | 86/100 [1:25:05<13:50, 59.30s/it] 87%|████████▋ | 87/100 [1:26:04<12:50, 59.25s/it] 88%|████████▊ | 88/100 [1:27:03<11:51, 59.26s/it] 89%|████████▉ | 89/100 [1:28:02<10:51, 59.23s/it] 90%|█████████ | 90/100 [1:29:02<09:52, 59.29s/it] 91%|█████████ | 91/100 [1:30:01<08:53, 59.32s/it] 92%|█████████▏| 92/100 [1:31:01<07:54, 59.31s/it] 93%|█████████▎| 93/100 [1:32:00<06:54, 59.25s/it] 94%|█████████▍| 94/100 [1:32:59<05:55, 59.21s/it] 95%|█████████▌| 95/100 [1:33:58<04:56, 59.30s/it] 96%|█████████▌| 96/100 [1:34:58<03:57, 59.29s/it] 97%|█████████▋| 97/100 [1:35:57<02:57, 59.27s/it] 98%|█████████▊| 98/100 [1:36:56<01:58, 59.27s/it] 99%|█████████▉| 99/100 [1:37:55<00:59, 59.22s/it]100%|██████████| 100/100 [1:38:53<00:00, 58.92s/it]***** Running Evaluation *****
  Num examples = 800
  Batch size = 64

  0%|          | 0/13 [00:00<?, ?it/s][A
 15%|█▌        | 2/13 [00:10<00:56,  5.18s/it][A
 23%|██▎       | 3/13 [00:20<01:12,  7.28s/it][A
 31%|███       | 4/13 [00:30<01:15,  8.34s/it][A
 38%|███▊      | 5/13 [00:40<01:12,  9.02s/it][A
 46%|████▌     | 6/13 [00:51<01:05,  9.41s/it][A
 54%|█████▍    | 7/13 [01:01<00:58,  9.67s/it][A
 62%|██████▏   | 8/13 [01:11<00:49,  9.81s/it][A
 69%|██████▉   | 9/13 [01:21<00:39,  9.94s/it][A
 77%|███████▋  | 10/13 [01:31<00:29, 10.00s/it][A
 85%|████████▍ | 11/13 [01:42<00:20, 10.07s/it][A
 92%|█████████▏| 12/13 [01:52<00:10, 10.08s/it][A
100%|██████████| 13/13 [01:57<00:00,  8.58s/it][A                                                   
                                               [A100%|██████████| 100/100 [1:41:01<00:00, 58.92s/it]
100%|██████████| 13/13 [01:57<00:00,  8.58s/it][A
                                               [A

Training completed. Do not forget to share your model on huggingface.co/models =)


                                                   100%|██████████| 100/100 [1:41:01<00:00, 58.92s/it]100%|██████████| 100/100 [1:41:01<00:00, 60.62s/it]
***** Running Prediction *****
  Num examples = 800
  Batch size = 64
/home2/hsteinm/573/repo/src/fine-tune.py:38: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  item = {key: torch.tensor(val[index]) for key, val in self.encodings.items()}
  0%|          | 0/13 [00:00<?, ?it/s] 15%|█▌        | 2/13 [00:10<00:56,  5.11s/it] 23%|██▎       | 3/13 [00:20<01:12,  7.22s/it] 31%|███       | 4/13 [00:30<01:14,  8.29s/it] 38%|███▊      | 5/13 [00:40<01:11,  8.95s/it] 46%|████▌     | 6/13 [00:50<01:05,  9.37s/it] 54%|█████▍    | 7/13 [01:01<00:58,  9.74s/it] 62%|██████▏   | 8/13 [01:11<00:49,  9.94s/it] 69%|██████▉   | 9/13 [01:22<00:40, 10.13s/it] 77%|███████▋  | 10/13 [01:32<00:30, 10.20s/it] 85%|████████▍ | 11/13 [01:43<00:20, 10.38s/it] 92%|█████████▏| 12/13 [01:53<00:10, 10.30s/it]100%|██████████| 13/13 [01:58<00:00,  8.72s/it]100%|██████████| 13/13 [02:09<00:00,  9.99s/it]
